from pytest import approx
from math import sqrt
from polyedr import Polyedr

# Помимо данных тестов подсчёта периметра подходящих граней также
# добавлены тесты вспомогательных функций perimeter(), is_seen()
# классов facet и edge.

# Более подбробная информация о работе алгоритма выводится при
# вызове метода draw() класса polyedr, что делается в файле run_shadow.py,
# На что я буду опираться при описании результатов тестов.


class TestPolyedr:
    # Два плоских листа, один частино затеняет другой.
    # Поскольку нижний лист частично видим, горизонтален и смещён от центра,
    # то он подходит под условия и его периметр (20) выводится.
    def test_polyedr_1(self):
        assert Polyedr(f"data/test_planes1.geom").perimeter() == 20

    # Что если изменить его так, чтобы одно из доп. условий перестало
    # выполняться? Сместим лист так, чтобы его центр оказался внутри
    # единичного квадрата. Он перестал подходить и выводится 0.
    def test_polyedr_2(self):
        assert Polyedr(f"data/test_planes2.geom").perimeter() == 0

    # Подведём значения под провал второго условия на угл наклона грани:
    # наклоним нижнюю плоскость более, чем на pi/7. Верно выводится 0.
    def test_polyedr_3(self):
        assert Polyedr(f"data/test_planes3.geom").perimeter() == 0

    # Оставив наклон нижней плоскости, наклоним верхнюю вниз левым краем так,
    # чтобы вторая стала её немного затенять, но не слишком круто, чтобы
    # условие на угл выполнялось. Теперь эта грань подходит под все условия.
    def test_polyedr_4(self):
        assert Polyedr(f"data/test_planes4.geom").perimeter() \
            == approx(20.770329)

    # Можно также взять другой многогранник. Коробка из базовых примеров.
    # Программа верно выводит, что только 3 из граней являются частично
    # видимыми.  Однако все нижняя грань проваливается условие центра,
    # а боковые грани условие угла.
    def test_polyedr_5(self):
        assert Polyedr(f"data/test_box1.geom").perimeter() == 0

    # Немного сдвинув коробку в сторону, можно добиться того, чтобы
    # нижняя грань прошла условие центра и теперь её периметр выводится.
    def test_polyedr_6(self):
        assert Polyedr(f"data/test_box2.geom").perimeter() == 4
